package unf.edu.jambaaddressbook;




import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.Fragment;
import android.content.DialogInterface;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class ContactInfoFragment extends Fragment {
	
	public interface ContactInfoFragmentListener{
		 public void onContactDeleted();
		 public void onEditContact(Bundle info);
	}
	ContactInfoFragmentListener listener;
	private long rowID = -1; // selected contact's rowID
	   private TextView nameTextView; // displays contact's name 
	   private TextView phoneTextView; // displays contact's phone
	   private TextView emailTextView; // displays contact's email
	   private TextView streetTextView; // displays contact's street
	   private TextView cityStateTextView;
	   
	   @Override
	   public void onAttach(Activity activity)
	   {
	      super.onAttach(activity);
	      listener = (ContactInfoFragmentListener) activity;
	   }
	
	   @Override
	   public void onDetach()
	   {
	      super.onDetach();
	      listener = null;
	   }
	   
	   @Override
	   public View onCreateView(LayoutInflater inflater, ViewGroup container,
	      Bundle savedInstanceState)
	   {
	      super.onCreateView(inflater, container, savedInstanceState);  
	      setRetainInstance(true); // save fragment across config changes

	      // if DetailsFragment is being restored, get saved row ID
	      if (savedInstanceState != null) 
	         rowID = savedInstanceState.getLong(MainActivity.CONTACT_ID);
	      else 
	      {
	         // get Bundle of arguments then extract the contact's row ID
	         Bundle info = getArguments(); 
	         
	         if (info != null)
	            rowID = info.getLong(MainActivity.CONTACT_ID);
	      }
	      View view = 
	    	         inflater.inflate(R.layout.contact_info_fragment, container, false);               
	    	      setHasOptionsMenu(true); // this fragment has menu items to display

	    	      // get the EditTexts
	    	      nameTextView = (TextView) view.findViewById(R.id.nameTextView);
	    	      phoneTextView = (TextView) view.findViewById(R.id.phoneTextView);
	    	      emailTextView = (TextView) view.findViewById(R.id.emailTextView);
	    	      streetTextView = (TextView) view.findViewById(R.id.streetTextView);
	    	      cityStateTextView = (TextView) view.findViewById(R.id.cityStateTextView);
	    	      return view;
	   }
	   @Override
	   public void onResume()
	   {
	      super.onResume();
	      new LoadContact().execute(rowID); // load contact at rowID
	   } 

	   @Override
	   public void onSaveInstanceState(Bundle outState) 
	   {
	       super.onSaveInstanceState(outState);
	       outState.putLong(MainActivity.CONTACT_ID, rowID);
	   }
	   @Override
	   public void onCreateOptionsMenu(Menu menu, MenuInflater inflater)
	   {
	      super.onCreateOptionsMenu(menu, inflater);
	      inflater.inflate(R.menu.contact_inf_fragment_menu, menu);
	   }
	   @Override
	   public boolean onOptionsItemSelected(MenuItem item) 
	   {
	      switch (item.getItemId())
	      {
	         case R.id.action_edit: 
	            // create Bundle containing contact data to edit
	            Bundle info = new Bundle();
	            info.putLong(MainActivity.CONTACT_ID, rowID);
	            info.putCharSequence("name", nameTextView.getText());
	            info.putCharSequence("phone", phoneTextView.getText());
	            info.putCharSequence("email", emailTextView.getText());
	            info.putCharSequence("street", streetTextView.getText());
	            info.putCharSequence("city", cityStateTextView.getText());
	                      
	            listener.onEditContact(info); // pass Bundle to listener
	            return true;
	         case R.id.action_delete:
	            deleteContact();
	            return true;
	      }
	      return super.onOptionsItemSelected(item);
	   }
	   private class LoadContact extends AsyncTask<Long, Object, Cursor> 
	   {
	      DatabaseConnector dbConnector = 
	         new DatabaseConnector(getActivity());

	      // open database & get Cursor representing specified contact's data
	      @Override
	      protected Cursor doInBackground(Long... params)
	      {
	         dbConnector.open();
	         return dbConnector.getOneContact(params[0]);
	      } 

	      // use the Cursor returned from the doInBackground method
	      @Override
	      protected void onPostExecute(Cursor result)
	      {
	         super.onPostExecute(result);
	         result.moveToFirst(); // move to the first item 
	   
	         // get the column index for each data item
	         int nameIndex = result.getColumnIndex("name");
	         int phoneIndex = result.getColumnIndex("phone");
	         int emailIndex = result.getColumnIndex("email");
	         int streetIndex = result.getColumnIndex("street");
	         int cityStateIndex = result.getColumnIndex("city");
	         
	   
	         // fill TextViews with the retrieved data
	         nameTextView.setText(result.getString(nameIndex));
	         phoneTextView.setText(result.getString(phoneIndex));
	         emailTextView.setText(result.getString(emailIndex));
	         streetTextView.setText(result.getString(streetIndex));
	         cityStateTextView.setText(result.getString(cityStateIndex));
	         
	   
	         result.close(); // close the result cursor
	         dbConnector.close(); // close database connection
	      } // end method onPostExecute
	   } // end class LoadContactTask
	   private void deleteContact()
	   {         
	      // use FragmentManager to display the confirmDelete DialogFragment
	      confirmDelete.show(getFragmentManager(), "confirm delete");
	   } 
	   private DialogFragment confirmDelete = 
			      new DialogFragment()
			      {
			         // create an AlertDialog and return it
			         @Override
			         public Dialog onCreateDialog(Bundle bundle)
			         {
			            // create a new AlertDialog Builder
			            AlertDialog.Builder builder = 
			               new AlertDialog.Builder(getActivity());
			      
			            builder.setTitle(R.string.dialog_title); 
			            builder.setMessage(R.string.dialog_message);
			      
			            // provide an OK button that simply dismisses the dialog
			            builder.setPositiveButton(R.string.delete_button,
			               new DialogInterface.OnClickListener()
			               {
			                  @Override
			                  public void onClick(
			                     DialogInterface dialog, int button)
			                  {
			                     final DatabaseConnector dbConnector = 
			                        new DatabaseConnector(getActivity());
			      
			                     // AsyncTask deletes contact and notifies listener
			                     AsyncTask<Long, Object, Object> delete =
			                        new AsyncTask<Long, Object, Object>()
			                        {
			                           @Override
			                           protected Object doInBackground(Long... params)
			                           {
			                              dbConnector.deleteContact(params[0]); 
			                              return null;
			                           } 
			      
			                           @Override
			                           protected void onPostExecute(Object result)
			                           {                                 
			                              listener.onContactDeleted();
			                           }
			                        }; // end new AsyncTask
			      
			                     // execute the AsyncTask to delete contact at rowID
			                     delete.execute(new Long[] { rowID });               
			                  } // end method onClick
			               } // end anonymous inner class
			            ); // end call to method setPositiveButton
			            
			            builder.setNegativeButton(R.string.cancel_button, null);
			            return builder.create(); // return the AlertDialog
			         }
			      }; // end DialogFragment anonymous inner class
}
